2024-04-01 22:49:04,958 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+617932d
------------------------------------------------------------

2024-04-01 22:49:04,959 - mmcls - INFO - Distributed training: False
2024-04-01 22:49:05,130 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='ShuffleNetV2', widen_factor=1.0),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=17,
        in_channels=1024,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=1e-05, momentum=0.5, weight_decay=1e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[10, 25])
runner = dict(type='EpochBasedRunner', max_epochs=50)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/shufflenet_v2_flowers'
gpu_ids = range(0, 1)

2024-04-01 22:49:05,239 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([24, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.conv1.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv1.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch1.0.conv.weight - torch.Size([24, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch1.0.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch1.0.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch1.1.conv.weight - torch.Size([58, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch1.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch1.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.0.conv.weight - torch.Size([58, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch2.0.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.0.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.1.conv.weight - torch.Size([58, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch2.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.2.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch2.2.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.2.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.0.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.1.branch2.0.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.0.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.1.conv.weight - torch.Size([58, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.1.branch2.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.2.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.1.branch2.2.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.2.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.0.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.2.branch2.0.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.0.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.1.conv.weight - torch.Size([58, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.2.branch2.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.2.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.2.branch2.2.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.2.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.0.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.3.branch2.0.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.0.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.1.conv.weight - torch.Size([58, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.3.branch2.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.2.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.3.branch2.2.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.2.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch1.0.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch1.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch1.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch1.1.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch1.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch1.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.1.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.1.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.1.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.2.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.2.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.2.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.3.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.3.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.3.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.4.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.4.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.4.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.5.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.5.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.5.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.6.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.6.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.6.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.7.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.7.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.7.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch1.0.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch1.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch1.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch1.1.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch1.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch1.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.0.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch2.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.1.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch2.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.2.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch2.2.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.2.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.0.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.1.branch2.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.1.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.1.branch2.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.2.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.1.branch2.2.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.2.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.0.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.2.branch2.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.1.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.2.branch2.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.2.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.2.branch2.2.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.2.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.0.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.3.branch2.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.1.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.3.branch2.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.2.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.3.branch2.2.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.2.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.conv.weight - torch.Size([1024, 464, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.3.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([17, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-04-01 22:49:08,515 - mmcls - INFO - Start running, host: u3583070@gpu2-comp-2, work_dir: /userhome/cs2/u3583070/CNN_Image_Classification_Code/output/shufflenet_v2_flowers
2024-04-01 22:49:08,515 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-01 22:49:08,515 - mmcls - INFO - workflow: [('train', 1)], max: 50 epochs
2024-04-01 22:49:08,516 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/u3583070/CNN_Image_Classification_Code/output/shufflenet_v2_flowers by HardDiskBackend.
2024-04-01 22:49:30,471 - mmcls - INFO - Saving checkpoint at 1 epochs
2024-04-01 22:49:34,913 - mmcls - INFO - Epoch(val) [1][6]	accuracy_top-1: 5.8824, accuracy_top-5: 29.4118
2024-04-01 22:49:45,587 - mmcls - INFO - Saving checkpoint at 2 epochs
2024-04-01 22:49:47,146 - mmcls - INFO - Epoch(val) [2][6]	accuracy_top-1: 5.8824, accuracy_top-5: 30.5882
2024-04-01 22:49:57,877 - mmcls - INFO - Saving checkpoint at 3 epochs
2024-04-01 22:49:59,495 - mmcls - INFO - Epoch(val) [3][6]	accuracy_top-1: 5.8824, accuracy_top-5: 30.5882
2024-04-01 22:50:12,150 - mmcls - INFO - Saving checkpoint at 4 epochs
2024-04-01 22:50:13,765 - mmcls - INFO - Epoch(val) [4][6]	accuracy_top-1: 5.2941, accuracy_top-5: 30.0000
2024-04-01 22:50:27,056 - mmcls - INFO - Saving checkpoint at 5 epochs
2024-04-01 22:50:28,663 - mmcls - INFO - Epoch(val) [5][6]	accuracy_top-1: 5.2941, accuracy_top-5: 29.4118
2024-04-01 22:50:44,984 - mmcls - INFO - Saving checkpoint at 6 epochs
2024-04-01 22:50:46,544 - mmcls - INFO - Epoch(val) [6][6]	accuracy_top-1: 5.8824, accuracy_top-5: 27.6471
2024-04-01 22:51:01,930 - mmcls - INFO - Saving checkpoint at 7 epochs
2024-04-01 22:51:03,585 - mmcls - INFO - Epoch(val) [7][6]	accuracy_top-1: 5.2941, accuracy_top-5: 27.6471
2024-04-01 22:51:15,827 - mmcls - INFO - Saving checkpoint at 8 epochs
2024-04-01 22:51:17,404 - mmcls - INFO - Epoch(val) [8][6]	accuracy_top-1: 5.2941, accuracy_top-5: 30.5882
2024-04-01 22:51:27,595 - mmcls - INFO - Saving checkpoint at 9 epochs
2024-04-01 22:51:29,161 - mmcls - INFO - Epoch(val) [9][6]	accuracy_top-1: 5.8824, accuracy_top-5: 30.5882
2024-04-01 22:51:39,325 - mmcls - INFO - Saving checkpoint at 10 epochs
2024-04-01 22:51:40,875 - mmcls - INFO - Epoch(val) [10][6]	accuracy_top-1: 5.8824, accuracy_top-5: 29.4118
2024-04-01 22:51:51,175 - mmcls - INFO - Saving checkpoint at 11 epochs
2024-04-01 22:51:52,772 - mmcls - INFO - Epoch(val) [11][6]	accuracy_top-1: 5.8824, accuracy_top-5: 31.1765
2024-04-01 22:52:03,451 - mmcls - INFO - Saving checkpoint at 12 epochs
2024-04-01 22:52:05,039 - mmcls - INFO - Epoch(val) [12][6]	accuracy_top-1: 5.8824, accuracy_top-5: 31.7647
2024-04-01 22:52:15,652 - mmcls - INFO - Saving checkpoint at 13 epochs
2024-04-01 22:52:17,224 - mmcls - INFO - Epoch(val) [13][6]	accuracy_top-1: 5.2941, accuracy_top-5: 30.5882
2024-04-01 22:52:27,668 - mmcls - INFO - Saving checkpoint at 14 epochs
2024-04-01 22:52:29,249 - mmcls - INFO - Epoch(val) [14][6]	accuracy_top-1: 5.8824, accuracy_top-5: 31.1765
2024-04-01 22:52:39,764 - mmcls - INFO - Saving checkpoint at 15 epochs
2024-04-01 22:52:41,350 - mmcls - INFO - Epoch(val) [15][6]	accuracy_top-1: 5.2941, accuracy_top-5: 31.1765
2024-04-01 22:52:51,932 - mmcls - INFO - Saving checkpoint at 16 epochs
2024-04-01 22:52:53,524 - mmcls - INFO - Epoch(val) [16][6]	accuracy_top-1: 5.2941, accuracy_top-5: 33.5294
2024-04-01 22:53:04,031 - mmcls - INFO - Saving checkpoint at 17 epochs
2024-04-01 22:53:05,616 - mmcls - INFO - Epoch(val) [17][6]	accuracy_top-1: 5.2941, accuracy_top-5: 32.3529
2024-04-01 22:53:15,907 - mmcls - INFO - Saving checkpoint at 18 epochs
2024-04-01 22:53:17,443 - mmcls - INFO - Epoch(val) [18][6]	accuracy_top-1: 5.8824, accuracy_top-5: 31.7647
2024-04-01 22:53:27,732 - mmcls - INFO - Saving checkpoint at 19 epochs
2024-04-01 22:53:29,247 - mmcls - INFO - Epoch(val) [19][6]	accuracy_top-1: 5.8824, accuracy_top-5: 32.9412
2024-04-01 22:53:39,583 - mmcls - INFO - Saving checkpoint at 20 epochs
2024-04-01 22:53:41,145 - mmcls - INFO - Epoch(val) [20][6]	accuracy_top-1: 5.8824, accuracy_top-5: 30.5882
2024-04-01 22:53:51,592 - mmcls - INFO - Saving checkpoint at 21 epochs
2024-04-01 22:53:53,182 - mmcls - INFO - Epoch(val) [21][6]	accuracy_top-1: 6.4706, accuracy_top-5: 31.7647
2024-04-01 22:54:03,722 - mmcls - INFO - Saving checkpoint at 22 epochs
2024-04-01 22:54:05,626 - mmcls - INFO - Epoch(val) [22][6]	accuracy_top-1: 7.0588, accuracy_top-5: 31.7647
2024-04-01 22:54:16,228 - mmcls - INFO - Saving checkpoint at 23 epochs
2024-04-01 22:54:17,821 - mmcls - INFO - Epoch(val) [23][6]	accuracy_top-1: 5.8824, accuracy_top-5: 34.1176
2024-04-01 22:54:28,344 - mmcls - INFO - Saving checkpoint at 24 epochs
2024-04-01 22:54:29,922 - mmcls - INFO - Epoch(val) [24][6]	accuracy_top-1: 5.8824, accuracy_top-5: 32.9412
2024-04-01 22:54:40,384 - mmcls - INFO - Saving checkpoint at 25 epochs
2024-04-01 22:54:41,942 - mmcls - INFO - Epoch(val) [25][6]	accuracy_top-1: 5.8824, accuracy_top-5: 35.8824
2024-04-01 22:54:52,460 - mmcls - INFO - Saving checkpoint at 26 epochs
2024-04-01 22:54:54,054 - mmcls - INFO - Epoch(val) [26][6]	accuracy_top-1: 5.2941, accuracy_top-5: 34.1176
2024-04-01 22:55:04,532 - mmcls - INFO - Saving checkpoint at 27 epochs
2024-04-01 22:55:06,139 - mmcls - INFO - Epoch(val) [27][6]	accuracy_top-1: 5.2941, accuracy_top-5: 31.1765
2024-04-01 22:55:16,662 - mmcls - INFO - Saving checkpoint at 28 epochs
2024-04-01 22:55:18,190 - mmcls - INFO - Epoch(val) [28][6]	accuracy_top-1: 5.2941, accuracy_top-5: 32.3529
2024-04-01 22:55:28,581 - mmcls - INFO - Saving checkpoint at 29 epochs
2024-04-01 22:55:29,982 - mmcls - INFO - Epoch(val) [29][6]	accuracy_top-1: 4.7059, accuracy_top-5: 32.9412
2024-04-01 22:55:40,415 - mmcls - INFO - Saving checkpoint at 30 epochs
2024-04-01 22:55:41,920 - mmcls - INFO - Epoch(val) [30][6]	accuracy_top-1: 5.2941, accuracy_top-5: 34.1176
2024-04-01 22:55:52,153 - mmcls - INFO - Saving checkpoint at 31 epochs
2024-04-01 22:55:53,519 - mmcls - INFO - Epoch(val) [31][6]	accuracy_top-1: 5.8824, accuracy_top-5: 33.5294
2024-04-01 22:56:04,239 - mmcls - INFO - Saving checkpoint at 32 epochs
2024-04-01 22:56:06,104 - mmcls - INFO - Epoch(val) [32][6]	accuracy_top-1: 5.8824, accuracy_top-5: 33.5294
2024-04-01 22:56:16,612 - mmcls - INFO - Saving checkpoint at 33 epochs
2024-04-01 22:56:18,245 - mmcls - INFO - Epoch(val) [33][6]	accuracy_top-1: 4.7059, accuracy_top-5: 32.3529
2024-04-01 22:56:28,827 - mmcls - INFO - Saving checkpoint at 34 epochs
2024-04-01 22:56:30,447 - mmcls - INFO - Epoch(val) [34][6]	accuracy_top-1: 5.2941, accuracy_top-5: 33.5294
2024-04-01 22:56:41,083 - mmcls - INFO - Saving checkpoint at 35 epochs
2024-04-01 22:56:42,662 - mmcls - INFO - Epoch(val) [35][6]	accuracy_top-1: 6.4706, accuracy_top-5: 32.3529
2024-04-01 22:56:53,188 - mmcls - INFO - Saving checkpoint at 36 epochs
2024-04-01 22:56:54,783 - mmcls - INFO - Epoch(val) [36][6]	accuracy_top-1: 5.2941, accuracy_top-5: 32.3529
2024-04-01 22:57:05,648 - mmcls - INFO - Saving checkpoint at 37 epochs
2024-04-01 22:57:07,546 - mmcls - INFO - Epoch(val) [37][6]	accuracy_top-1: 5.2941, accuracy_top-5: 31.7647
2024-04-01 22:57:18,199 - mmcls - INFO - Saving checkpoint at 38 epochs
2024-04-01 22:57:19,751 - mmcls - INFO - Epoch(val) [38][6]	accuracy_top-1: 4.1176, accuracy_top-5: 32.9412
2024-04-01 22:57:30,328 - mmcls - INFO - Saving checkpoint at 39 epochs
2024-04-01 22:57:31,901 - mmcls - INFO - Epoch(val) [39][6]	accuracy_top-1: 4.7059, accuracy_top-5: 31.7647
2024-04-01 22:57:42,390 - mmcls - INFO - Saving checkpoint at 40 epochs
2024-04-01 22:57:43,940 - mmcls - INFO - Epoch(val) [40][6]	accuracy_top-1: 6.4706, accuracy_top-5: 32.9412
2024-04-01 22:57:54,465 - mmcls - INFO - Saving checkpoint at 41 epochs
2024-04-01 22:57:56,126 - mmcls - INFO - Epoch(val) [41][6]	accuracy_top-1: 5.8824, accuracy_top-5: 32.9412
2024-04-01 22:58:06,817 - mmcls - INFO - Saving checkpoint at 42 epochs
2024-04-01 22:58:08,550 - mmcls - INFO - Epoch(val) [42][6]	accuracy_top-1: 5.2941, accuracy_top-5: 31.7647
2024-04-01 22:58:19,138 - mmcls - INFO - Saving checkpoint at 43 epochs
2024-04-01 22:58:20,964 - mmcls - INFO - Epoch(val) [43][6]	accuracy_top-1: 5.8824, accuracy_top-5: 33.5294
2024-04-01 22:58:31,297 - mmcls - INFO - Saving checkpoint at 44 epochs
2024-04-01 22:58:33,045 - mmcls - INFO - Epoch(val) [44][6]	accuracy_top-1: 5.8824, accuracy_top-5: 31.1765
2024-04-01 22:58:43,417 - mmcls - INFO - Saving checkpoint at 45 epochs
2024-04-01 22:58:45,132 - mmcls - INFO - Epoch(val) [45][6]	accuracy_top-1: 6.4706, accuracy_top-5: 32.9412
2024-04-01 22:58:55,629 - mmcls - INFO - Saving checkpoint at 46 epochs
2024-04-01 22:58:57,488 - mmcls - INFO - Epoch(val) [46][6]	accuracy_top-1: 5.2941, accuracy_top-5: 33.5294
2024-04-01 22:59:07,520 - mmcls - INFO - Saving checkpoint at 47 epochs
2024-04-01 22:59:09,069 - mmcls - INFO - Epoch(val) [47][6]	accuracy_top-1: 7.0588, accuracy_top-5: 31.1765
2024-04-01 22:59:19,376 - mmcls - INFO - Saving checkpoint at 48 epochs
2024-04-01 22:59:20,852 - mmcls - INFO - Epoch(val) [48][6]	accuracy_top-1: 5.8824, accuracy_top-5: 32.9412
2024-04-01 22:59:30,965 - mmcls - INFO - Saving checkpoint at 49 epochs
2024-04-01 22:59:32,515 - mmcls - INFO - Epoch(val) [49][6]	accuracy_top-1: 5.8824, accuracy_top-5: 31.7647
2024-04-01 22:59:43,018 - mmcls - INFO - Saving checkpoint at 50 epochs
2024-04-01 22:59:44,667 - mmcls - INFO - Epoch(val) [50][6]	accuracy_top-1: 5.8824, accuracy_top-5: 32.3529
