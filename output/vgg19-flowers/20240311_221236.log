2024-03-11 22:12:36,708 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+617932d
------------------------------------------------------------

2024-03-11 22:12:36,710 - mmcls - INFO - Distributed training: False
2024-03-11 22:12:36,898 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='VGG', depth=16, num_classes=17),
    neck=None,
    head=dict(
        type='ClsHead',
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[10, 25])
runner = dict(type='EpochBasedRunner', max_epochs=50)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/vgg19-flowers'
gpu_ids = range(0, 1)

2024-03-11 22:12:38,324 - mmcls - INFO - initialize VGG with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1.0, 'layer': ['_BatchNorm']}, {'type': 'Normal', 'std': 0.01, 'layer': ['Linear']}]
Name of parameter - Initialization information

backbone.features.0.conv.weight - torch.Size([64, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.0.conv.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.1.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.1.conv.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.3.conv.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.3.conv.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.4.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.4.conv.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.6.conv.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.6.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.7.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.7.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.8.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.8.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.10.conv.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.10.conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.11.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.11.conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.12.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.12.conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.14.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.14.conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.15.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.15.conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.features.16.conv.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.features.16.conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.classifier.0.weight - torch.Size([4096, 25088]): 
NormalInit: mean=0, std=0.01, bias=0 

backbone.classifier.0.bias - torch.Size([4096]): 
NormalInit: mean=0, std=0.01, bias=0 

backbone.classifier.3.weight - torch.Size([4096, 4096]): 
NormalInit: mean=0, std=0.01, bias=0 

backbone.classifier.3.bias - torch.Size([4096]): 
NormalInit: mean=0, std=0.01, bias=0 

backbone.classifier.6.weight - torch.Size([17, 4096]): 
NormalInit: mean=0, std=0.01, bias=0 

backbone.classifier.6.bias - torch.Size([17]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-03-11 22:12:43,115 - mmcls - INFO - Start running, host: u3581237@gpu2-comp-115, work_dir: /userhome/cs2/u3581237/CNN_Image_Classification_Code/output/vgg19-flowers
2024-03-11 22:12:43,116 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-03-11 22:12:43,116 - mmcls - INFO - workflow: [('train', 1)], max: 50 epochs
2024-03-11 22:12:43,116 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/u3581237/CNN_Image_Classification_Code/output/vgg19-flowers by HardDiskBackend.
2024-03-11 22:12:55,813 - mmcls - INFO - Saving checkpoint at 1 epochs
2024-03-11 22:13:04,476 - mmcls - INFO - Epoch(val) [1][6]	accuracy_top-1: 8.2353, accuracy_top-5: 37.6471
2024-03-11 22:13:14,940 - mmcls - INFO - Saving checkpoint at 2 epochs
2024-03-11 22:13:23,259 - mmcls - INFO - Epoch(val) [2][6]	accuracy_top-1: 6.4706, accuracy_top-5: 45.2941
2024-03-11 22:13:33,743 - mmcls - INFO - Saving checkpoint at 3 epochs
2024-03-11 22:13:41,610 - mmcls - INFO - Epoch(val) [3][6]	accuracy_top-1: 12.9412, accuracy_top-5: 58.8235
2024-03-11 22:13:52,127 - mmcls - INFO - Saving checkpoint at 4 epochs
2024-03-11 22:14:00,055 - mmcls - INFO - Epoch(val) [4][6]	accuracy_top-1: 19.4118, accuracy_top-5: 63.5294
2024-03-11 22:14:10,553 - mmcls - INFO - Saving checkpoint at 5 epochs
2024-03-11 22:14:18,502 - mmcls - INFO - Epoch(val) [5][6]	accuracy_top-1: 20.0000, accuracy_top-5: 74.1176
2024-03-11 22:14:29,136 - mmcls - INFO - Saving checkpoint at 6 epochs
2024-03-11 22:14:37,337 - mmcls - INFO - Epoch(val) [6][6]	accuracy_top-1: 30.0000, accuracy_top-5: 81.1765
2024-03-11 22:14:47,974 - mmcls - INFO - Saving checkpoint at 7 epochs
2024-03-11 22:14:55,806 - mmcls - INFO - Epoch(val) [7][6]	accuracy_top-1: 30.5882, accuracy_top-5: 77.6471
2024-03-11 22:15:07,155 - mmcls - INFO - Saving checkpoint at 8 epochs
2024-03-11 22:15:15,501 - mmcls - INFO - Epoch(val) [8][6]	accuracy_top-1: 26.4706, accuracy_top-5: 85.8824
2024-03-11 22:15:26,057 - mmcls - INFO - Saving checkpoint at 9 epochs
2024-03-11 22:15:33,967 - mmcls - INFO - Epoch(val) [9][6]	accuracy_top-1: 30.0000, accuracy_top-5: 85.8824
2024-03-11 22:15:44,680 - mmcls - INFO - Saving checkpoint at 10 epochs
2024-03-11 22:15:52,663 - mmcls - INFO - Epoch(val) [10][6]	accuracy_top-1: 34.7059, accuracy_top-5: 87.0588
2024-03-11 22:16:04,054 - mmcls - INFO - Saving checkpoint at 11 epochs
2024-03-11 22:16:11,984 - mmcls - INFO - Epoch(val) [11][6]	accuracy_top-1: 36.4706, accuracy_top-5: 87.6471
2024-03-11 22:16:22,633 - mmcls - INFO - Saving checkpoint at 12 epochs
2024-03-11 22:16:31,432 - mmcls - INFO - Epoch(val) [12][6]	accuracy_top-1: 37.0588, accuracy_top-5: 88.8235
2024-03-11 22:16:42,617 - mmcls - INFO - Saving checkpoint at 13 epochs
2024-03-11 22:16:50,659 - mmcls - INFO - Epoch(val) [13][6]	accuracy_top-1: 39.4118, accuracy_top-5: 90.5882
2024-03-11 22:17:01,322 - mmcls - INFO - Saving checkpoint at 14 epochs
2024-03-11 22:17:09,561 - mmcls - INFO - Epoch(val) [14][6]	accuracy_top-1: 41.7647, accuracy_top-5: 89.4118
2024-03-11 22:17:20,924 - mmcls - INFO - Saving checkpoint at 15 epochs
2024-03-11 22:17:28,744 - mmcls - INFO - Epoch(val) [15][6]	accuracy_top-1: 39.4118, accuracy_top-5: 89.4118
2024-03-11 22:17:39,707 - mmcls - INFO - Saving checkpoint at 16 epochs
2024-03-11 22:17:48,060 - mmcls - INFO - Epoch(val) [16][6]	accuracy_top-1: 39.4118, accuracy_top-5: 91.1765
2024-03-11 22:17:58,655 - mmcls - INFO - Saving checkpoint at 17 epochs
2024-03-11 22:18:06,504 - mmcls - INFO - Epoch(val) [17][6]	accuracy_top-1: 42.9412, accuracy_top-5: 91.1765
2024-03-11 22:18:17,137 - mmcls - INFO - Saving checkpoint at 18 epochs
2024-03-11 22:18:25,217 - mmcls - INFO - Epoch(val) [18][6]	accuracy_top-1: 42.9412, accuracy_top-5: 90.0000
2024-03-11 22:18:37,049 - mmcls - INFO - Saving checkpoint at 19 epochs
2024-03-11 22:18:44,834 - mmcls - INFO - Epoch(val) [19][6]	accuracy_top-1: 41.7647, accuracy_top-5: 90.0000
2024-03-11 22:18:55,505 - mmcls - INFO - Saving checkpoint at 20 epochs
2024-03-11 22:19:03,491 - mmcls - INFO - Epoch(val) [20][6]	accuracy_top-1: 45.2941, accuracy_top-5: 91.1765
2024-03-11 22:19:14,322 - mmcls - INFO - Saving checkpoint at 21 epochs
2024-03-11 22:19:22,759 - mmcls - INFO - Epoch(val) [21][6]	accuracy_top-1: 40.5882, accuracy_top-5: 91.7647
2024-03-11 22:19:33,331 - mmcls - INFO - Saving checkpoint at 22 epochs
2024-03-11 22:19:41,476 - mmcls - INFO - Epoch(val) [22][6]	accuracy_top-1: 41.7647, accuracy_top-5: 91.7647
2024-03-11 22:19:53,591 - mmcls - INFO - Saving checkpoint at 23 epochs
2024-03-11 22:20:01,958 - mmcls - INFO - Epoch(val) [23][6]	accuracy_top-1: 41.7647, accuracy_top-5: 90.0000
2024-03-11 22:20:13,282 - mmcls - INFO - Saving checkpoint at 24 epochs
2024-03-11 22:20:21,063 - mmcls - INFO - Epoch(val) [24][6]	accuracy_top-1: 46.4706, accuracy_top-5: 92.3529
2024-03-11 22:20:32,749 - mmcls - INFO - Saving checkpoint at 25 epochs
2024-03-11 22:20:41,194 - mmcls - INFO - Epoch(val) [25][6]	accuracy_top-1: 46.4706, accuracy_top-5: 91.7647
2024-03-11 22:20:51,805 - mmcls - INFO - Saving checkpoint at 26 epochs
2024-03-11 22:21:00,215 - mmcls - INFO - Epoch(val) [26][6]	accuracy_top-1: 47.6471, accuracy_top-5: 92.3529
2024-03-11 22:21:11,034 - mmcls - INFO - Saving checkpoint at 27 epochs
2024-03-11 22:21:18,956 - mmcls - INFO - Epoch(val) [27][6]	accuracy_top-1: 47.6471, accuracy_top-5: 91.7647
2024-03-11 22:21:30,445 - mmcls - INFO - Saving checkpoint at 28 epochs
2024-03-11 22:21:39,136 - mmcls - INFO - Epoch(val) [28][6]	accuracy_top-1: 50.0000, accuracy_top-5: 91.7647
2024-03-11 22:21:49,789 - mmcls - INFO - Saving checkpoint at 29 epochs
2024-03-11 22:21:57,540 - mmcls - INFO - Epoch(val) [29][6]	accuracy_top-1: 48.2353, accuracy_top-5: 92.3529
2024-03-11 22:22:08,534 - mmcls - INFO - Saving checkpoint at 30 epochs
2024-03-11 22:22:16,540 - mmcls - INFO - Epoch(val) [30][6]	accuracy_top-1: 48.2353, accuracy_top-5: 92.3529
2024-03-11 22:22:27,865 - mmcls - INFO - Saving checkpoint at 31 epochs
2024-03-11 22:22:35,817 - mmcls - INFO - Epoch(val) [31][6]	accuracy_top-1: 45.8824, accuracy_top-5: 91.7647
2024-03-11 22:22:46,460 - mmcls - INFO - Saving checkpoint at 32 epochs
2024-03-11 22:22:54,822 - mmcls - INFO - Epoch(val) [32][6]	accuracy_top-1: 49.4118, accuracy_top-5: 92.3529
2024-03-11 22:23:06,180 - mmcls - INFO - Saving checkpoint at 33 epochs
2024-03-11 22:23:13,716 - mmcls - INFO - Epoch(val) [33][6]	accuracy_top-1: 48.8235, accuracy_top-5: 91.7647
2024-03-11 22:23:24,311 - mmcls - INFO - Saving checkpoint at 34 epochs
2024-03-11 22:23:32,013 - mmcls - INFO - Epoch(val) [34][6]	accuracy_top-1: 50.0000, accuracy_top-5: 92.3529
2024-03-11 22:23:42,661 - mmcls - INFO - Saving checkpoint at 35 epochs
2024-03-11 22:23:51,107 - mmcls - INFO - Epoch(val) [35][6]	accuracy_top-1: 51.7647, accuracy_top-5: 92.3529
2024-03-11 22:24:01,841 - mmcls - INFO - Saving checkpoint at 36 epochs
2024-03-11 22:24:09,813 - mmcls - INFO - Epoch(val) [36][6]	accuracy_top-1: 51.1765, accuracy_top-5: 92.3529
2024-03-11 22:24:20,367 - mmcls - INFO - Saving checkpoint at 37 epochs
2024-03-11 22:24:28,789 - mmcls - INFO - Epoch(val) [37][6]	accuracy_top-1: 50.0000, accuracy_top-5: 92.3529
2024-03-11 22:24:40,519 - mmcls - INFO - Saving checkpoint at 38 epochs
2024-03-11 22:24:48,487 - mmcls - INFO - Epoch(val) [38][6]	accuracy_top-1: 51.1765, accuracy_top-5: 91.7647
2024-03-11 22:24:58,987 - mmcls - INFO - Saving checkpoint at 39 epochs
2024-03-11 22:25:07,024 - mmcls - INFO - Epoch(val) [39][6]	accuracy_top-1: 48.2353, accuracy_top-5: 92.3529
2024-03-11 22:25:17,493 - mmcls - INFO - Saving checkpoint at 40 epochs
2024-03-11 22:25:25,162 - mmcls - INFO - Epoch(val) [40][6]	accuracy_top-1: 49.4118, accuracy_top-5: 92.3529
2024-03-11 22:25:35,956 - mmcls - INFO - Saving checkpoint at 41 epochs
2024-03-11 22:25:44,071 - mmcls - INFO - Epoch(val) [41][6]	accuracy_top-1: 50.0000, accuracy_top-5: 92.3529
2024-03-11 22:25:54,669 - mmcls - INFO - Saving checkpoint at 42 epochs
2024-03-11 22:26:02,062 - mmcls - INFO - Epoch(val) [42][6]	accuracy_top-1: 51.1765, accuracy_top-5: 92.3529
2024-03-11 22:26:12,476 - mmcls - INFO - Saving checkpoint at 43 epochs
2024-03-11 22:26:20,252 - mmcls - INFO - Epoch(val) [43][6]	accuracy_top-1: 50.0000, accuracy_top-5: 92.3529
2024-03-11 22:26:30,823 - mmcls - INFO - Saving checkpoint at 44 epochs
2024-03-11 22:26:38,385 - mmcls - INFO - Epoch(val) [44][6]	accuracy_top-1: 51.7647, accuracy_top-5: 92.3529
2024-03-11 22:26:48,925 - mmcls - INFO - Saving checkpoint at 45 epochs
2024-03-11 22:26:56,504 - mmcls - INFO - Epoch(val) [45][6]	accuracy_top-1: 51.7647, accuracy_top-5: 92.3529
2024-03-11 22:27:07,161 - mmcls - INFO - Saving checkpoint at 46 epochs
2024-03-11 22:27:14,804 - mmcls - INFO - Epoch(val) [46][6]	accuracy_top-1: 51.7647, accuracy_top-5: 92.3529
2024-03-11 22:27:25,365 - mmcls - INFO - Saving checkpoint at 47 epochs
2024-03-11 22:27:33,608 - mmcls - INFO - Epoch(val) [47][6]	accuracy_top-1: 50.5882, accuracy_top-5: 91.7647
2024-03-11 22:27:44,874 - mmcls - INFO - Saving checkpoint at 48 epochs
2024-03-11 22:27:52,447 - mmcls - INFO - Epoch(val) [48][6]	accuracy_top-1: 52.3529, accuracy_top-5: 92.3529
2024-03-11 22:28:02,997 - mmcls - INFO - Saving checkpoint at 49 epochs
2024-03-11 22:28:11,096 - mmcls - INFO - Epoch(val) [49][6]	accuracy_top-1: 49.4118, accuracy_top-5: 91.7647
2024-03-11 22:28:21,930 - mmcls - INFO - Saving checkpoint at 50 epochs
2024-03-11 22:28:29,788 - mmcls - INFO - Epoch(val) [50][6]	accuracy_top-1: 51.1765, accuracy_top-5: 91.7647
