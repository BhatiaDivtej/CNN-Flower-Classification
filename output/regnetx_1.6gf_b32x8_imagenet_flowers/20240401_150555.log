2024-04-01 15:05:55,193 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.16 (default, Jan 17 2023, 22:20:44) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.9.0
MMCV: 1.5.0
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMClassification: 0.15.0+617932d
------------------------------------------------------------

2024-04-01 15:05:55,194 - mmcls - INFO - Distributed training: False
2024-04-01 15:05:55,355 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='RegNet', arch='regnetx_1.6gf'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=1000,
        in_channels=912,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'Flowers'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=1,
    train=dict(
        type='Flowers',
        data_prefix='data/flowers/train',
        ann_file='data/flowers/meta/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='Flowers',
        data_prefix='data/flowers/val',
        ann_file='data/flowers/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[100, 150])
runner = dict(type='EpochBasedRunner', max_epochs=50)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'output/regnetx_1.6gf_b32x8_imagenet_flowers'
gpu_ids = range(0, 1)

2024-04-01 15:05:55,794 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([32, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([72, 32, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([72, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([72, 72, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn3.weight - torch.Size([72]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer1.0.bn3.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([72, 32, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([72, 72, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([72, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([72, 72, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn3.weight - torch.Size([72]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer1.1.bn3.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([168, 72, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([168, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([168, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn3.weight - torch.Size([168]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer2.0.bn3.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([168, 72, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([168, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([168, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([168, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn3.weight - torch.Size([168]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer2.1.bn3.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([168, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([168, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([168, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn3.weight - torch.Size([168]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer2.2.bn3.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([168, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([168, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.weight - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([168, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn3.weight - torch.Size([168]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer2.3.bn3.bias - torch.Size([168]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([408, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.0.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([408, 168, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.1.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.2.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.3.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.4.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.5.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.6.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.6.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.7.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.7.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.8.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.8.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv1.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn1.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn1.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv2.weight - torch.Size([408, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn2.weight - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn2.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.conv3.weight - torch.Size([408, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.9.bn3.weight - torch.Size([408]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer3.9.bn3.bias - torch.Size([408]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([912, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.weight - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([912, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.weight - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([912, 912, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn3.weight - torch.Size([912]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer4.0.bn3.bias - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([912, 408, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.weight - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([912, 912, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.weight - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([912, 24, 3, 3]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.weight - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([912, 912, 1, 1]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn3.weight - torch.Size([912]): 
Initialized by user-defined `init_weights` in RegNet  

backbone.layer4.1.bn3.bias - torch.Size([912]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([1000, 912]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([1000]): 
NormalInit: mean=0, std=0.01, bias=0 
2024-04-01 15:05:58,985 - mmcls - INFO - Start running, host: u3570905@gpu2-comp-104, work_dir: /userhome/cs2/u3570905/CNN_Image_Classification_Code/output/regnetx_1.6gf_b32x8_imagenet_flowers
2024-04-01 15:05:58,985 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-01 15:05:58,985 - mmcls - INFO - workflow: [('train', 1)], max: 50 epochs
2024-04-01 15:05:58,985 - mmcls - INFO - Checkpoints will be saved to /userhome/cs2/u3570905/CNN_Image_Classification_Code/output/regnetx_1.6gf_b32x8_imagenet_flowers by HardDiskBackend.
2024-04-01 15:06:50,344 - mmcls - INFO - Saving checkpoint at 1 epochs
2024-04-01 15:06:58,988 - mmcls - INFO - Epoch(val) [1][6]	accuracy_top-1: 12.3529, accuracy_top-5: 62.9412
2024-04-01 15:07:09,443 - mmcls - INFO - Saving checkpoint at 2 epochs
2024-04-01 15:07:12,844 - mmcls - INFO - Epoch(val) [2][6]	accuracy_top-1: 27.6471, accuracy_top-5: 73.5294
2024-04-01 15:07:22,537 - mmcls - INFO - Saving checkpoint at 3 epochs
2024-04-01 15:07:24,584 - mmcls - INFO - Epoch(val) [3][6]	accuracy_top-1: 43.5294, accuracy_top-5: 87.0588
2024-04-01 15:07:34,379 - mmcls - INFO - Saving checkpoint at 4 epochs
2024-04-01 15:07:36,557 - mmcls - INFO - Epoch(val) [4][6]	accuracy_top-1: 41.1765, accuracy_top-5: 82.9412
2024-04-01 15:07:46,168 - mmcls - INFO - Saving checkpoint at 5 epochs
2024-04-01 15:07:48,417 - mmcls - INFO - Epoch(val) [5][6]	accuracy_top-1: 47.0588, accuracy_top-5: 91.7647
2024-04-01 15:07:58,190 - mmcls - INFO - Saving checkpoint at 6 epochs
2024-04-01 15:08:00,337 - mmcls - INFO - Epoch(val) [6][6]	accuracy_top-1: 45.2941, accuracy_top-5: 90.0000
2024-04-01 15:08:09,751 - mmcls - INFO - Saving checkpoint at 7 epochs
2024-04-01 15:08:11,745 - mmcls - INFO - Epoch(val) [7][6]	accuracy_top-1: 48.8235, accuracy_top-5: 93.5294
2024-04-01 15:08:21,431 - mmcls - INFO - Saving checkpoint at 8 epochs
2024-04-01 15:08:23,735 - mmcls - INFO - Epoch(val) [8][6]	accuracy_top-1: 51.7647, accuracy_top-5: 90.5882
2024-04-01 15:08:33,273 - mmcls - INFO - Saving checkpoint at 9 epochs
2024-04-01 15:08:35,403 - mmcls - INFO - Epoch(val) [9][6]	accuracy_top-1: 55.8824, accuracy_top-5: 93.5294
2024-04-01 15:08:45,035 - mmcls - INFO - Saving checkpoint at 10 epochs
2024-04-01 15:08:47,057 - mmcls - INFO - Epoch(val) [10][6]	accuracy_top-1: 57.6471, accuracy_top-5: 93.5294
2024-04-01 15:08:56,939 - mmcls - INFO - Saving checkpoint at 11 epochs
2024-04-01 15:08:58,996 - mmcls - INFO - Epoch(val) [11][6]	accuracy_top-1: 54.1176, accuracy_top-5: 95.8824
2024-04-01 15:09:08,613 - mmcls - INFO - Saving checkpoint at 12 epochs
2024-04-01 15:09:10,710 - mmcls - INFO - Epoch(val) [12][6]	accuracy_top-1: 57.6471, accuracy_top-5: 93.5294
2024-04-01 15:09:20,305 - mmcls - INFO - Saving checkpoint at 13 epochs
2024-04-01 15:09:22,323 - mmcls - INFO - Epoch(val) [13][6]	accuracy_top-1: 59.4118, accuracy_top-5: 94.1176
2024-04-01 15:09:31,725 - mmcls - INFO - Saving checkpoint at 14 epochs
2024-04-01 15:09:33,829 - mmcls - INFO - Epoch(val) [14][6]	accuracy_top-1: 59.4118, accuracy_top-5: 92.3529
2024-04-01 15:09:43,397 - mmcls - INFO - Saving checkpoint at 15 epochs
2024-04-01 15:09:45,515 - mmcls - INFO - Epoch(val) [15][6]	accuracy_top-1: 55.2941, accuracy_top-5: 93.5294
2024-04-01 15:09:55,091 - mmcls - INFO - Saving checkpoint at 16 epochs
2024-04-01 15:09:57,159 - mmcls - INFO - Epoch(val) [16][6]	accuracy_top-1: 61.7647, accuracy_top-5: 93.5294
2024-04-01 15:10:06,715 - mmcls - INFO - Saving checkpoint at 17 epochs
2024-04-01 15:10:08,770 - mmcls - INFO - Epoch(val) [17][6]	accuracy_top-1: 50.5882, accuracy_top-5: 93.5294
2024-04-01 15:10:18,434 - mmcls - INFO - Saving checkpoint at 18 epochs
2024-04-01 15:10:20,484 - mmcls - INFO - Epoch(val) [18][6]	accuracy_top-1: 62.3529, accuracy_top-5: 94.7059
2024-04-01 15:10:30,260 - mmcls - INFO - Saving checkpoint at 19 epochs
2024-04-01 15:10:32,273 - mmcls - INFO - Epoch(val) [19][6]	accuracy_top-1: 64.1176, accuracy_top-5: 94.1176
2024-04-01 15:10:41,989 - mmcls - INFO - Saving checkpoint at 20 epochs
2024-04-01 15:10:44,100 - mmcls - INFO - Epoch(val) [20][6]	accuracy_top-1: 57.6471, accuracy_top-5: 94.7059
2024-04-01 15:10:53,823 - mmcls - INFO - Saving checkpoint at 21 epochs
2024-04-01 15:10:55,904 - mmcls - INFO - Epoch(val) [21][6]	accuracy_top-1: 70.0000, accuracy_top-5: 97.6471
2024-04-01 15:11:05,239 - mmcls - INFO - Saving checkpoint at 22 epochs
2024-04-01 15:11:07,880 - mmcls - INFO - Epoch(val) [22][6]	accuracy_top-1: 66.4706, accuracy_top-5: 95.2941
2024-04-01 15:11:17,562 - mmcls - INFO - Saving checkpoint at 23 epochs
2024-04-01 15:11:19,616 - mmcls - INFO - Epoch(val) [23][6]	accuracy_top-1: 58.8235, accuracy_top-5: 98.8235
2024-04-01 15:11:29,280 - mmcls - INFO - Saving checkpoint at 24 epochs
2024-04-01 15:11:31,345 - mmcls - INFO - Epoch(val) [24][6]	accuracy_top-1: 64.7059, accuracy_top-5: 95.2941
2024-04-01 15:11:40,944 - mmcls - INFO - Saving checkpoint at 25 epochs
2024-04-01 15:11:42,871 - mmcls - INFO - Epoch(val) [25][6]	accuracy_top-1: 64.1176, accuracy_top-5: 97.0588
2024-04-01 15:11:52,473 - mmcls - INFO - Saving checkpoint at 26 epochs
2024-04-01 15:11:54,714 - mmcls - INFO - Epoch(val) [26][6]	accuracy_top-1: 63.5294, accuracy_top-5: 94.1176
2024-04-01 15:12:04,881 - mmcls - INFO - Saving checkpoint at 27 epochs
2024-04-01 15:12:07,171 - mmcls - INFO - Epoch(val) [27][6]	accuracy_top-1: 66.4706, accuracy_top-5: 97.0588
2024-04-01 15:12:16,526 - mmcls - INFO - Saving checkpoint at 28 epochs
2024-04-01 15:12:18,553 - mmcls - INFO - Epoch(val) [28][6]	accuracy_top-1: 70.0000, accuracy_top-5: 95.8824
2024-04-01 15:12:28,211 - mmcls - INFO - Saving checkpoint at 29 epochs
2024-04-01 15:12:30,397 - mmcls - INFO - Epoch(val) [29][6]	accuracy_top-1: 67.0588, accuracy_top-5: 96.4706
2024-04-01 15:12:39,993 - mmcls - INFO - Saving checkpoint at 30 epochs
2024-04-01 15:12:42,112 - mmcls - INFO - Epoch(val) [30][6]	accuracy_top-1: 62.9412, accuracy_top-5: 97.0588
2024-04-01 15:12:51,680 - mmcls - INFO - Saving checkpoint at 31 epochs
2024-04-01 15:12:53,770 - mmcls - INFO - Epoch(val) [31][6]	accuracy_top-1: 70.5882, accuracy_top-5: 96.4706
2024-04-01 15:13:03,289 - mmcls - INFO - Saving checkpoint at 32 epochs
2024-04-01 15:13:05,749 - mmcls - INFO - Epoch(val) [32][6]	accuracy_top-1: 65.8824, accuracy_top-5: 98.8235
2024-04-01 15:13:15,544 - mmcls - INFO - Saving checkpoint at 33 epochs
2024-04-01 15:13:17,618 - mmcls - INFO - Epoch(val) [33][6]	accuracy_top-1: 71.1765, accuracy_top-5: 97.6471
2024-04-01 15:13:27,292 - mmcls - INFO - Saving checkpoint at 34 epochs
2024-04-01 15:13:29,337 - mmcls - INFO - Epoch(val) [34][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.6471
2024-04-01 15:13:38,749 - mmcls - INFO - Saving checkpoint at 35 epochs
2024-04-01 15:13:40,848 - mmcls - INFO - Epoch(val) [35][6]	accuracy_top-1: 67.0588, accuracy_top-5: 97.6471
2024-04-01 15:13:50,372 - mmcls - INFO - Saving checkpoint at 36 epochs
2024-04-01 15:13:52,477 - mmcls - INFO - Epoch(val) [36][6]	accuracy_top-1: 73.5294, accuracy_top-5: 96.4706
2024-04-01 15:14:01,953 - mmcls - INFO - Saving checkpoint at 37 epochs
2024-04-01 15:14:03,926 - mmcls - INFO - Epoch(val) [37][6]	accuracy_top-1: 61.1765, accuracy_top-5: 91.1765
2024-04-01 15:14:13,707 - mmcls - INFO - Saving checkpoint at 38 epochs
2024-04-01 15:14:15,795 - mmcls - INFO - Epoch(val) [38][6]	accuracy_top-1: 67.0588, accuracy_top-5: 95.8824
2024-04-01 15:14:25,443 - mmcls - INFO - Saving checkpoint at 39 epochs
2024-04-01 15:14:27,467 - mmcls - INFO - Epoch(val) [39][6]	accuracy_top-1: 71.1765, accuracy_top-5: 97.6471
2024-04-01 15:14:36,972 - mmcls - INFO - Saving checkpoint at 40 epochs
2024-04-01 15:14:38,938 - mmcls - INFO - Epoch(val) [40][6]	accuracy_top-1: 72.9412, accuracy_top-5: 98.2353
2024-04-01 15:14:48,464 - mmcls - INFO - Saving checkpoint at 41 epochs
2024-04-01 15:14:50,567 - mmcls - INFO - Epoch(val) [41][6]	accuracy_top-1: 75.8824, accuracy_top-5: 97.6471
2024-04-01 15:14:59,745 - mmcls - INFO - Saving checkpoint at 42 epochs
2024-04-01 15:15:01,882 - mmcls - INFO - Epoch(val) [42][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.6471
2024-04-01 15:15:11,508 - mmcls - INFO - Saving checkpoint at 43 epochs
2024-04-01 15:15:13,672 - mmcls - INFO - Epoch(val) [43][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.0588
2024-04-01 15:15:23,632 - mmcls - INFO - Saving checkpoint at 44 epochs
2024-04-01 15:15:25,858 - mmcls - INFO - Epoch(val) [44][6]	accuracy_top-1: 74.1176, accuracy_top-5: 95.8824
2024-04-01 15:15:35,482 - mmcls - INFO - Saving checkpoint at 45 epochs
2024-04-01 15:15:37,576 - mmcls - INFO - Epoch(val) [45][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.6471
2024-04-01 15:15:47,229 - mmcls - INFO - Saving checkpoint at 46 epochs
2024-04-01 15:15:49,317 - mmcls - INFO - Epoch(val) [46][6]	accuracy_top-1: 71.1765, accuracy_top-5: 97.6471
2024-04-01 15:15:58,984 - mmcls - INFO - Saving checkpoint at 47 epochs
2024-04-01 15:16:01,063 - mmcls - INFO - Epoch(val) [47][6]	accuracy_top-1: 70.5882, accuracy_top-5: 95.2941
2024-04-01 15:16:10,662 - mmcls - INFO - Saving checkpoint at 48 epochs
2024-04-01 15:16:12,668 - mmcls - INFO - Epoch(val) [48][6]	accuracy_top-1: 73.5294, accuracy_top-5: 97.6471
2024-04-01 15:16:22,048 - mmcls - INFO - Saving checkpoint at 49 epochs
2024-04-01 15:16:24,127 - mmcls - INFO - Epoch(val) [49][6]	accuracy_top-1: 75.8824, accuracy_top-5: 98.8235
2024-04-01 15:16:34,049 - mmcls - INFO - Saving checkpoint at 50 epochs
2024-04-01 15:16:36,143 - mmcls - INFO - Epoch(val) [50][6]	accuracy_top-1: 74.1176, accuracy_top-5: 97.6471
